from pydantic import BaseModel, Field
from typing import Literal, Optional, Union, List, Dict


class ChatCompletionMessageToolCallParamFunction(BaseModel):
    arguments: str = Field(
        description="""
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """
    )
    name: str = Field(description="The name of the function to call.")


class ChatCompletionMessageToolCallParam(BaseModel):
    id: str = Field(description="The ID of the tool call.")
    function: ChatCompletionMessageToolCallParamFunction = Field(
        description="The function that the model called."
    )
    type: Literal["function"]


class ChatCompletionSystemMessageParam(BaseModel):
    content: str
    role: Literal["system"]
    name: Optional[str] = None
    raw: bool = Field(False, description="Whether to treat content as raw text")


class ChatCompletionUserMessageParam(BaseModel):
    content: str
    role: Literal["user"]
    name: Optional[str] = None
    raw: bool = Field(False, description="Whether to treat content as raw text")


class ChatCompletionAssistantMessageParam(BaseModel):
    content: Optional[str] = None
    role: Literal["assistant"]
    name: Optional[str] = None
    tool_calls: Optional[List[ChatCompletionMessageToolCallParam]] = Field(
        [], description="The tool calls generated by the model, such as function calls."
    )
    raw: bool = Field(False, description="Whether to treat content as raw text")


class ChatCompletionToolMessageParam(BaseModel):
    content: str
    role: Literal["tool"]
    name: Optional[str] = None
    tool_call_id: str = Field(
        description="Tool call that this message is responding to."
    )


ChatCompletionMessageParam = Union[
    ChatCompletionSystemMessageParam,
    ChatCompletionUserMessageParam,
    ChatCompletionAssistantMessageParam,
    ChatCompletionToolMessageParam,
]


class ResponseFormat(BaseModel):
    type: Literal["text", "json_object"]


class ChatCompletionNamedToolChoiceParamFunction(BaseModel):
    name: str


class ChatCompletionNamedToolChoiceParam(BaseModel):
    function: ChatCompletionNamedToolChoiceParamFunction
    type: Literal["function"] = "function"


FunctionParameters = Dict[str, object]


class FunctionDefinition(BaseModel):
    name: str = Field(
        min_length=1,
        max_length=64,
        description="The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
    )
    description: str = Field(
        None,
        description="A description of what the function does, used by the model to choose when and how to call the function.",
    )
    parameters: Union[FunctionParameters, None] = None


class ChatCompletionToolParam(BaseModel):
    function: FunctionDefinition
    type: Literal["function"] = "function"
